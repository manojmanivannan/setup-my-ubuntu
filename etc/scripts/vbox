#!/bin/bash

# ==============================================================================
#  A Bash script to easily manage VirtualBox virtual machines.
# ==============================================================================

# --- Helper Functions ---

# Function to get all available VM names
get_all_vms() {
    VBoxManage list vms | sed -e 's/.*"\(.*\)".*/\1/'
}

# Function to check if a specific VM exists
vm_exists() {
    local vm_name="$1"
    # Use grep with -q (quiet) and -x (exact line match) for efficiency
    get_all_vms | grep -q -x "${vm_name}"
}

# Function to display usage information
usage() {
    echo "Usage: $(basename "$0") --name <VM_NAME> <OPERATION>"
    echo ""
    echo "A simple and interactive wrapper for VBoxManage."
    echo ""
    echo "Operations:"
    echo "  start           - Start the VM headless"
    echo "  stop            - Properly shut down the VM (sends ACPI signal)"
    echo "  poweroff        - Immediately kill the power to the VM (force stop)"
    echo "  reboot          - Properly restart the VM"
    echo "  reset           - Force-reset the VM without a proper shutdown"
    echo "  pause           - Pause the VM without changing its state"
    echo "  resume          - Resume a paused VM"
    echo "  savestate       - Save the current state to disk and then stop the VM"
    echo "  status          - Show the current running state of the VM"
}

# --- Main Script Logic ---

# Check if VBoxManage is available
if ! command -v VBoxManage &> /dev/null; then
    echo "❌ Error: VBoxManage command not found."
    echo "Please ensure VirtualBox is installed and 'VBoxManage' is in your system's PATH."
    exit 1
fi

# Define the list of valid operations
readonly VALID_OPERATIONS=(
    "start" "stop" "poweroff" "reboot" 
    "reset" "pause" "resume" "savestate" "status"
)

VM_NAME=""
OPERATION=""

# Parse command-line arguments
if [ "$#" -eq 0 ]; then
    usage
    exit 1
fi

while (( "$#" )); do
  case "$1" in
    --name)
      if [ -n "$2" ] && [[ "${2:0:1}" != "-" ]]; then
        VM_NAME="$2"
        shift 2
      else
        echo "❌ Error: Argument for --name is missing." >&2
        exit 1
      fi
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *) # Any other argument is assumed to be the operation
      if [ -z "$OPERATION" ]; then
        OPERATION=$1
      else
        echo "❌ Error: Unknown or duplicate argument: $1" >&2
        usage
        exit 1
      fi
      shift
      ;;
  esac
done

# Check if mandatory arguments were provided
if [ -z "$VM_NAME" ] || [ -z "$OPERATION" ]; then
    echo "❌ Error: Both --name and an operation are required." >&2
    usage
    exit 1
fi

# --- Validation ---

# 1. Validate the VM Name
if ! vm_exists "$VM_NAME"; then
    echo "❌ Error: VM '$VM_NAME' not found."
    echo "Available VMs are:"
    get_all_vms | sed 's/^/  • /' # Indent and bullet the list
    exit 1
fi

# 2. Validate the Operation
if ! [[ " ${VALID_OPERATIONS[*]} " =~ " ${OPERATION} " ]]; then
    echo "❌ Error: Invalid operation '$OPERATION'."
    echo "Available operations are:"
    printf "  • %s\n" "${VALID_OPERATIONS[@]}"
    exit 1
fi

# --- Execution ---

echo "⚙️  Executing '$OPERATION' on VM '$VM_NAME'..."

case "$OPERATION" in
    start)
        VBoxManage startvm "$VM_NAME" --type headless
        ;;
    stop)
        VBoxManage controlvm "$VM_NAME" acpipowerbutton
        ;;
    poweroff)
        VBoxManage controlvm "$VM_NAME" poweroff
        ;;
    reboot)
        # VBoxManage has no direct reboot, so we combine stop and start
        echo "Attempting graceful shutdown..."
        VBoxManage controlvm "$VM_NAME" acpipowerbutton
        # Wait for the VM to shut down. This loop waits up to 60 seconds.
        for i in {1..60}; do
            if ! VBoxManage list runningvms | grep -q "\"$VM_NAME\""; then
                echo "VM shut down. Restarting..."
                VBoxManage startvm "$VM_NAME"
                break
            fi
            sleep 1
        done
        ;;
    reset)
        VBoxManage controlvm "$VM_NAME" reset
        ;;
    pause)
        VBoxManage controlvm "$VM_NAME" pause
        ;;
    resume)
        VBoxManage controlvm "$VM_NAME" resume
        ;;
    savestate)
        VBoxManage controlvm "$VM_NAME" savestate
        ;;
    status)
        VBoxManage showvminfo "$VM_NAME" --machinereadable | grep "VMState=" | cut -d'"' -f2
        ;;
esac

# Check the exit status of the last command
if [ $? -eq 0 ]; then
    echo "✅ Operation '$OPERATION' completed successfully for VM '$VM_NAME'."
else
    echo "❌ Error executing '$OPERATION' on VM '$VM_NAME'."
fi
